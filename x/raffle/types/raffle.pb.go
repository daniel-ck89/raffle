// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: raffle/raffle/raffle.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Raffle struct {
	Creator              string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Id                   uint64 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	Status               uint32 `protobuf:"varint,3,opt,name=status,proto3" json:"status,omitempty"`
	Title                string `protobuf:"bytes,4,opt,name=title,proto3" json:"title,omitempty"`
	Description          string `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	ParticipantListUrl   string `protobuf:"bytes,6,opt,name=participantListUrl,proto3" json:"participantListUrl,omitempty"`
	NumberOfWinners      uint32 `protobuf:"varint,7,opt,name=numberOfWinners,proto3" json:"numberOfWinners,omitempty"`
	NumberOfParticipants uint32 `protobuf:"varint,8,opt,name=numberOfParticipants,proto3" json:"numberOfParticipants,omitempty"`
}

func (m *Raffle) Reset()         { *m = Raffle{} }
func (m *Raffle) String() string { return proto.CompactTextString(m) }
func (*Raffle) ProtoMessage()    {}
func (*Raffle) Descriptor() ([]byte, []int) {
	return fileDescriptor_06dc4907a7d23b9e, []int{0}
}
func (m *Raffle) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Raffle) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Raffle.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Raffle) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Raffle.Merge(m, src)
}
func (m *Raffle) XXX_Size() int {
	return m.Size()
}
func (m *Raffle) XXX_DiscardUnknown() {
	xxx_messageInfo_Raffle.DiscardUnknown(m)
}

var xxx_messageInfo_Raffle proto.InternalMessageInfo

func (m *Raffle) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *Raffle) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Raffle) GetStatus() uint32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *Raffle) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Raffle) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Raffle) GetParticipantListUrl() string {
	if m != nil {
		return m.ParticipantListUrl
	}
	return ""
}

func (m *Raffle) GetNumberOfWinners() uint32 {
	if m != nil {
		return m.NumberOfWinners
	}
	return 0
}

func (m *Raffle) GetNumberOfParticipants() uint32 {
	if m != nil {
		return m.NumberOfParticipants
	}
	return 0
}

func init() {
	proto.RegisterType((*Raffle)(nil), "raffle.raffle.Raffle")
}

func init() { proto.RegisterFile("raffle/raffle/raffle.proto", fileDescriptor_06dc4907a7d23b9e) }

var fileDescriptor_06dc4907a7d23b9e = []byte{
	// 256 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x90, 0xcd, 0x4a, 0xc3, 0x40,
	0x14, 0x85, 0x33, 0xb1, 0x4d, 0xf5, 0x4a, 0x15, 0x2e, 0x55, 0x06, 0x17, 0x43, 0x70, 0x95, 0x55,
	0x0b, 0xfa, 0x06, 0xae, 0x05, 0x25, 0x20, 0x82, 0xbb, 0x34, 0x99, 0xc0, 0x40, 0x9c, 0x0c, 0x77,
	0x6e, 0x41, 0xdf, 0xa2, 0x8f, 0xe5, 0xb2, 0x4b, 0x97, 0x92, 0xbc, 0x88, 0x30, 0x4d, 0xf0, 0x87,
	0xae, 0xce, 0x7c, 0xe7, 0x9c, 0x19, 0x86, 0x03, 0x57, 0x54, 0xd4, 0x75, 0xa3, 0x57, 0x7f, 0x64,
	0xe9, 0xa8, 0xe5, 0x16, 0xe7, 0x03, 0xed, 0xe5, 0x7a, 0x1b, 0x43, 0x92, 0x87, 0x23, 0x4a, 0x98,
	0x95, 0xa4, 0x0b, 0x6e, 0x49, 0x8a, 0x54, 0x64, 0x27, 0xf9, 0x88, 0x78, 0x06, 0xb1, 0xa9, 0x64,
	0x9c, 0x8a, 0x6c, 0x92, 0xc7, 0xa6, 0xc2, 0x4b, 0x48, 0x3c, 0x17, 0xbc, 0xf1, 0xf2, 0x28, 0x15,
	0xd9, 0x3c, 0x1f, 0x08, 0x17, 0x30, 0x65, 0xc3, 0x8d, 0x96, 0x93, 0x70, 0x7f, 0x0f, 0x98, 0xc2,
	0x69, 0xa5, 0x7d, 0x49, 0xc6, 0xb1, 0x69, 0xad, 0x9c, 0x86, 0xec, 0xb7, 0x85, 0x4b, 0x40, 0x57,
	0x10, 0x9b, 0xd2, 0xb8, 0xc2, 0xf2, 0xbd, 0xf1, 0xfc, 0x44, 0x8d, 0x4c, 0x42, 0xf1, 0x40, 0x82,
	0x19, 0x9c, 0xdb, 0xcd, 0xeb, 0x5a, 0xd3, 0x43, 0xfd, 0x6c, 0xac, 0xd5, 0xe4, 0xe5, 0x2c, 0x7c,
	0xe4, 0xbf, 0x8d, 0x37, 0xb0, 0x18, 0xad, 0xc7, 0x9f, 0x77, 0xbc, 0x3c, 0x0e, 0xf5, 0x83, 0xd9,
	0xdd, 0xea, 0xa3, 0x53, 0x62, 0xd7, 0x29, 0xf1, 0xd5, 0x29, 0xb1, 0xed, 0x55, 0xb4, 0xeb, 0x55,
	0xf4, 0xd9, 0xab, 0xe8, 0xe5, 0x62, 0x18, 0xf4, 0x6d, 0x5c, 0x96, 0xdf, 0x9d, 0xf6, 0xeb, 0x24,
	0x2c, 0x7b, 0xfb, 0x1d, 0x00, 0x00, 0xff, 0xff, 0xef, 0x32, 0x3a, 0x73, 0x77, 0x01, 0x00, 0x00,
}

func (m *Raffle) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Raffle) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Raffle) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NumberOfParticipants != 0 {
		i = encodeVarintRaffle(dAtA, i, uint64(m.NumberOfParticipants))
		i--
		dAtA[i] = 0x40
	}
	if m.NumberOfWinners != 0 {
		i = encodeVarintRaffle(dAtA, i, uint64(m.NumberOfWinners))
		i--
		dAtA[i] = 0x38
	}
	if len(m.ParticipantListUrl) > 0 {
		i -= len(m.ParticipantListUrl)
		copy(dAtA[i:], m.ParticipantListUrl)
		i = encodeVarintRaffle(dAtA, i, uint64(len(m.ParticipantListUrl)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintRaffle(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintRaffle(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x22
	}
	if m.Status != 0 {
		i = encodeVarintRaffle(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x18
	}
	if m.Id != 0 {
		i = encodeVarintRaffle(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintRaffle(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintRaffle(dAtA []byte, offset int, v uint64) int {
	offset -= sovRaffle(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Raffle) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovRaffle(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovRaffle(uint64(m.Id))
	}
	if m.Status != 0 {
		n += 1 + sovRaffle(uint64(m.Status))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovRaffle(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovRaffle(uint64(l))
	}
	l = len(m.ParticipantListUrl)
	if l > 0 {
		n += 1 + l + sovRaffle(uint64(l))
	}
	if m.NumberOfWinners != 0 {
		n += 1 + sovRaffle(uint64(m.NumberOfWinners))
	}
	if m.NumberOfParticipants != 0 {
		n += 1 + sovRaffle(uint64(m.NumberOfParticipants))
	}
	return n
}

func sovRaffle(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRaffle(x uint64) (n int) {
	return sovRaffle(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Raffle) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaffle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Raffle: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Raffle: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaffle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRaffle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRaffle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaffle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaffle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaffle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRaffle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRaffle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaffle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRaffle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRaffle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParticipantListUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaffle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRaffle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRaffle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ParticipantListUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumberOfWinners", wireType)
			}
			m.NumberOfWinners = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaffle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumberOfWinners |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumberOfParticipants", wireType)
			}
			m.NumberOfParticipants = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaffle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumberOfParticipants |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRaffle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRaffle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRaffle(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRaffle
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRaffle
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRaffle
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRaffle
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRaffle
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRaffle
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRaffle        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRaffle          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRaffle = fmt.Errorf("proto: unexpected end of group")
)
